- Assignment 1 - Building a Three Dimensional World
- -------------------------------------------------
- Due. January 26, 2015 -Note the due date is a week later than originally posted
- 
- There are four parts to this assignment. These are building the world, adding
- moving clouds, adding gravity, and adding collision detection.
- 
- 
- 1. World Building
- -----------------
- Create a three dimensional world from cubes.  Use Perlin noise to
- create an interesting surface for the world.
- 
- The upper surface of the world should be created using the noise function.
- 
- A web site with an explanation of Perlin noise is:
- 	http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
- You are not required to use the code from this site.
- 
- Due to the low resolution of the world, it is probably not necessary to
- use a large number of octaves in the calculation.
- 
- 
- 2. Collision Detection
- ----------------------
- Add collision detection so the viewpoint cannot pass into a space
- which is occupied by a cube.
- 
- The viewpoint should be able to climb onto cubes which are only
- one unit tall.  If the cube which is collided with does not have
- another cube above it then the viewpoint should move above the cube
- (it should step up on the single cube). If the object collided with
- is two or more cubes tall then the viewpoint should not move on top of it.
- 
- It is probably easier to implement collision detection before gravity
- because you can test collisions by moving the viewpoint into the world
- objects. If you implement gravity first then the viewpoint will fall
- through the ground and is difficult to control.
- 
- 
- 3. Gravity
- ----------
- Add gravity to the program so the viewpoint descends to the ground.
- The rate of descent should not be too fast (e.g. 0.1 per update). 
- Note that because the indices are negative, gravity is an increase in y.
- 
- Gravity operates like a collision with the ground. If gravity would
- push the viewpoint into an occupied cube then it should not be be allowed
- to move the viewpoint.
- 
- 
- 4. Clouds (object animation)
- ----------------------------
- Clouds will be animated objects which move through the upper part
- of the world space. You will need to keep track of the cloud's locations
- and update the world array as they move. The movement of the clouds
- should be easily visible.  Pick speed and shape for clouds which clearly
- demonstrate the motion. Make clouds larger than one or two cubes in size.
- 
- Add the clouds in the world array as white cubes.
- 
- Don't allow mountain tops to be destroyed by the clouds. Clouds should
- pass through mountain tops if they collide with them. Alternatively, you
- can just make sure the mountains and clouds never collide.
- 
- 
- 
- Note that timing control as discussed in class will be included in
- assignment 2.
- 
- 
- Coding Practices
- ----------------
- Write the code using standard stylistic practices. Use functions, 
- reasonable variable names, and consistent indentation.
- If the code is difficult for the TA to understand then you
- will lose marks.
- 
- As usual, keep backups of your work using source control software.
- 
- 
- Starting Code
- -------------
- The starting code is available on the Courselink site.
- You can untar the file using tar xf filename.
- All of the changes to the code can be made in the a1.c file.
- 
- Note that the graphics code may be modified for assignment 2. If you
- make changes to the graphics code (in graphics.c or visible.c) then you
- may have to recode the changes in assignment 2.
-   
- 
- Submitting the Assignment
- -------------------------
- Submit the assignment using Courselink. Submit only the source code
- and the makefile. Bundle the code in a tar file.
- 
- Include the graphics code with your submission. Include a makefile
- that will compile the executable. Name the executable a1.
-  
- The TA will unpack your code and type "make". They will then try to
- run an executable named "./a1".  If the make command or executing a1
- does not work then you will lose a substantial number of marks.
- 
- It is always a good idea to unpack and test the file you are submitting
- to be sure that what you submit actually compiles. 
 
 
 
